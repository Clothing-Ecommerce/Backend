datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================== Enums ===================

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum AddressLabel {
  HOME
  WORK
  OTHER
}

enum OrderStatus {
  PENDING       // tạo đơn, chờ xác nhận
  CONFIRMED     // đã xác nhận
  PAID          // đã thanh toán
  FULFILLING    // đang chuẩn bị hàng
  SHIPPED       // đã giao cho đơn vị vận chuyển
  COMPLETED     // hoàn thành
  CANCELLED     // hủy
  REFUNDED      // hoàn tiền
}

enum PaymentMethod {
  COD
  BANK_CARD
  BANK_TRANSFER
  PAYPAL
  VNPAY
  MOMO
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PriceType {
  LIST   // giá niêm yết (MSRP/compare-at)
  SALE   // giá bán áp dụng
}

// =================== Users & Addresses ===================

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String
  passwordHash String
  phone        String?
  gender       String?
  dateOfBirth  DateTime?
  avatar       String?
  role         Role        @default(CUSTOMER)
  status       UserStatus  @default(ACTIVE)

  addresses    Address[]
  cart         Cart?
  orders       Order[]
  reviews      Review[]
  wishlists    WishlistItem[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Address {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  isDefault     Boolean       @default(false)
  label         AddressLabel?
  recipient     String
  phone         String?
  company       String?

  // VN-style address parts
  houseNumber   String?
  street        String?
  wardCode      String?
  wardName      String?
  districtCode  String?
  districtName  String?
  provinceCode  String?
  provinceName  String?
  postalCode    String?
  building      String?
  block         String?
  floor         String?
  room          String?
  notes         String?

  country       String        @default("Vietnam")
  geoLat        Float?
  geoLng        Float?

  orders        Order[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([provinceCode, districtCode, wardCode])
}

model Province {
  code      String    @id
  name      String
  type      String?
  districts District[]
}

model District {
  code         String   @id
  name         String
  type         String?
  provinceCode String
  province     Province  @relation(fields: [provinceCode], references: [code], onDelete: Restrict)
  wards        Ward[]

  @@index([provinceCode])
}

model Ward {
  code         String   @id
  name         String
  type         String?
  districtCode String
  district     District @relation(fields: [districtCode], references: [code], onDelete: Restrict)

  @@index([districtCode])
}

// =================== Catalog: Category / Brand / Product / Variant ===================

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String?     @unique
  description String?

  products    Product[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  logoUrl   String?
  products  Product[]
}

model Product {
  id           Int             @id @default(autoincrement())
  name         String
  slug         String?          @unique
  description  String?
  basePrice    Decimal        

  categoryId   Int
  category     Category        @relation(fields: [categoryId], references: [id])

  brandId      Int?
  brand        Brand?          @relation(fields: [brandId], references: [id])

  images       ProductImage[]
  variants     ProductVariant[]
  reviews      Review[]
  wishlistedBy WishlistItem[]

  // flexible metadata (optional)
  features        Json?
  specifications  Json?

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([categoryId])
  @@index([name])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])

  url        String
  alt        String?
  isPrimary  Boolean  @default(false)
  sortOrder  Int      @default(0)

  createdAt  DateTime @default(now())
}

model Size {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  note     String?
  variants ProductVariant[]
}

model Color {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  hex      String?
  variants ProductVariant[]
}

model ProductVariant {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])

  sizeId     Int?
  size       Size?    @relation(fields: [sizeId], references: [id])

  colorId    Int?
  color      Color?   @relation(fields: [colorId], references: [id])

  sku        String?  @unique
  // null => dùng Product.basePrice
  price      Decimal?
  stock      Int      @default(0)
  isActive   Boolean  @default(true)

  prices     Price[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, sizeId, colorId])
  @@index([productId])
}

// =================== Pricing (history / analytics) ===================

model Price {
  id              Int            @id @default(autoincrement())
  variantId       Int
  variant         ProductVariant @relation(fields: [variantId], references: [id])

  type            PriceType
  amount          Decimal       
  currency        String         @default("VND")

  // validity window (null = open)
  startAt         DateTime?
  endAt           DateTime?

  // analytics helpers
  cost            Decimal?       // reference cost
  isTaxInclusive  Boolean        @default(false)
  taxRate         Decimal?       // e.g. 10.00 = 10%

  note            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([variantId, type, startAt, endAt])
}

// =================== Cart ===================

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])

  items     CartItem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int             @id @default(autoincrement())
  cartId    Int
  cart      Cart            @relation(fields: [cartId], references: [id])

  variantId Int
  variant   ProductVariant  @relation(fields: [variantId], references: [id])

  quantity  Int             @default(1)
  addedAt   DateTime        @default(now())

  @@unique([cartId, variantId])
  @@index([variantId])
}

// =================== Orders ===================

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])

  addressId     Int?
  address       Address?    @relation(fields: [addressId], references: [id])

  status        OrderStatus @default(PENDING)

  subtotal      Decimal    
  discount      Decimal     @default(0)
  shippingFee   Decimal     @default(0)
  total         Decimal    

  notes         String?

  items         OrderItem[]
  payment       Payment?
  coupons       OrderCoupon[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id           Int             @id @default(autoincrement())
  orderId      Int
  order        Order           @relation(fields: [orderId], references: [id])

  variantId    Int
  variant      ProductVariant  @relation(fields: [variantId], references: [id])

  quantity     Int
  // snapshot tại thời điểm bán
  priceAtTime  Decimal        
  costAtTime   Decimal?       
  taxRate      Decimal?      
  taxAmount    Decimal?       

  createdAt    DateTime        @default(now())

  @@index([orderId])
  @@index([variantId])
}

model Payment {
  id              Int            @id @default(autoincrement())
  orderId         Int            @unique
  order           Order          @relation(fields: [orderId], references: [id])

  method          PaymentMethod
  status          PaymentStatus  @default(PENDING)
  amount          Decimal       
  transactionCode String?
  paidAt          DateTime?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([status])
}

// =================== Reviews & Wishlist ===================

model Review {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])

  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  rating      Int
  title       String?
  content     String?
  isPublished Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([productId])
}

// =================== Discounts / Coupons ===================

model Coupon {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  description    String?
  type           DiscountType
  value          Decimal  // % hoặc số tiền cố định
  maxDiscount    Decimal?
  minOrderValue  Decimal?

  startsAt       DateTime?
  endsAt         DateTime?

  usageLimit     Int?
  usageCount     Int      @default(0)
  isActive       Boolean  @default(true)

  orders         OrderCoupon[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model OrderCoupon {
  orderId      Int
  couponId     Int
  // giá trị thực tế áp cho đơn (sau khi tính rule)
  appliedValue Decimal

  order   Order  @relation(fields: [orderId], references: [id])
  coupon  Coupon @relation(fields: [couponId], references: [id])

  @@id([orderId, couponId])
}
