datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId    Int      @id @default(autoincrement())
  username   String
  password   String
  email      String   @unique
  address    Address[]        @relation("UserAddresses")
  phone      String?
  gender     String?
  dateOfBirth DateTime?
  avatar     String?
  role       Role     @default(Customer)
  status     Status   @default(Active)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  carts      Cart[]
  orders     Order[]
  comments   Comment[]
  products   Product[] @relation("SellerProducts")
  suppliers  Supplier[]
}

model Address {
  addressId   Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("UserAddresses", fields: [userId], references: [userId], onDelete: Cascade)

  label       AddressLabel?      // Home / Work / Other
  recipient   String             // Họ tên người nhận (thay fullName cho rõ nghĩa VN)
  phone       String?            // SĐT người nhận
  company     String?            // nếu là địa chỉ công ty
  // Thành phần địa chỉ chi tiết kiểu VN
  houseNumber String?            // Số nhà, ngõ, hẻm
  street      String?            // Tên đường
  wardCode    String?            // mã phường/xã (VD: 27134)
  wardName    String?            // tên phường/xã
  districtCode String?           // mã quận/huyện
  districtName String?
  provinceCode String?           // mã tỉnh/thành phố
  provinceName String?
  postalCode  String?            // mã bưu chính VN (5 số; tùy chọn)
  building    String?            // toà nhà/khu/chung cư (nếu có)
  block       String?            // block/khối (tuỳ chọn)
  floor       String?            // tầng (tuỳ chọn)
  room        String?            // căn/phòng (tuỳ chọn)
  notes       String?            // ghi chú giao hàng (vd: "gọi trước khi giao")

  // Tiện ích
  country     String   @default("Vietnam")
  geoLat      Float?   // tuỳ chọn: lưu toạ độ (delivery/định vị)
  geoLng      Float?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([provinceCode, districtCode, wardCode])
}

model Supplier {
  supplierId  Int      @id @default(autoincrement())
  name        String
  contactInfo String
  address     String
  sellerId    Int
  seller      User     @relation(fields: [sellerId], references: [userId])
}

model Category {
  categoryId Int      @id @default(autoincrement())
  name       String
  description String?
  status      CategoryStatus
  products    Product[]
}

model Product {
  productId      Int       @id @default(autoincrement())
  name           String
  description    String?
  price          Int
  originalPrice  Int?
  inStock        Boolean   @default(true)
  stockCount     Int       @default(0)
  rating         Float?    @default(0)
  reviewsCount   Int?      @default(0)
  isNew          Boolean   @default(false)
  isSale         Boolean   @default(false)

  // JSON fields
  images          Json      // array of image URLs
  colors          Json      // array of { name, value }
  sizes           Json      // array of size strings
  features        Json?     // array of features (string[])
  specifications  Json?     // object: { Material, Fit, Origin, ... }

  // Foreign keys
  categoryId     Int
  brandId        Int
  sellerId       Int

  // Timestamps
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  category        Category  @relation(fields: [categoryId], references: [categoryId])
  brand           Brand     @relation(fields: [brandId], references: [brandId])
  seller          User      @relation("SellerProducts", fields: [sellerId], references: [userId])
  comments        Comment[] // one-to-many: product can have many comments
  cartItems       CartItem[]
  orderItems      OrderItem[]
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [userId])
  cartItems CartItem[]
}

model CartItem {
  cartItemId Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int
  addedAt    DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [cartId])
  product   Product  @relation(fields: [productId], references: [productId])
}

model Order {
  orderId         Int          @id @default(autoincrement())
  userId          Int
  totalAmount     Float
  shippingAddress String
  shippingMethod  String
  status          OrderStatus
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [userId])
  orderItems      OrderItem[]
  payment         Payment?
}

model OrderItem {
  orderItemId Int     @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int
  priceAtTime  Float
  order       Order   @relation(fields: [orderId], references: [orderId])
  product     Product @relation(fields: [productId], references: [productId])
}

model Payment {
  paymentId     Int           @id @default(autoincrement())
  orderId       Int           @unique
  amount        Float
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus
  transactionId  String?
  paidAt        DateTime      @default(now())
  order          Order         @relation(fields: [orderId], references: [orderId])
}

model Comment {
  commentId   Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  comment      String
  rating       Int
  commentDate DateTime @default(now())
  user       User     @relation(fields: [userId], references: [userId])
  product    Product  @relation(fields: [productId], references: [productId])
}

model Brand {
  brandId      Int      @id @default(autoincrement())
  name         String   @unique
  logoUrl     String?  
  products     Product[] 
}

enum AddressLabel {
  Home
  Work
  Other
}

enum Role {
  Customer
  Seller
  Admin
}

enum Status {
  Active
  Inactive
}

enum CategoryStatus {
  Pending
  Approved
  Rejected
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

enum PaymentMethod {
  COD
  CreditCard
  DigitalWallet
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}